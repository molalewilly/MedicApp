import React from 'react';
import { jsPDF } from 'jspdf';
import './DoctorReportModal.css';  // Import the scoped CSS

const DoctorReportModal = ({ doctor, onClose }) => {
  console.log(doctor); // Log the doctor data to verify it's being passed

  const downloadPDF = () => {
    const pdf = new jsPDF();

    // Set document styles
    pdf.setFont("Helvetica");
    pdf.setFontSize(16);
    pdf.setTextColor(0, 0, 0);

    // Add the header with doctor's name
    pdf.text(`${doctor.name}'s Report`, 10, 20);

    // Add the doctor's photo at the top-left (if available)
    if (doctor.photo) {
      const img = new Image();
      img.src = doctor.photo;
      console.log(img.src); // Log the image URL to verify

      img.onload = () => {
        pdf.addImage(img, 'JPEG', 10, 30, 40, 40); // Adjust size as needed
        // Now add the doctor details
        addDoctorDetails(pdf);
        pdf.save(`${doctor.name}_Report.pdf`);
      };

      img.onerror = () => {
        console.error('Image could not be loaded');
        pdf.setFontSize(12);
        pdf.text('Image could not be loaded', 10, 30);  // If image fails, display this message
        addDoctorDetails(pdf);
        pdf.save(`${doctor.name}_Report.pdf`);
      };
    } else {
      // If there's no photo URL, proceed without adding an image
      addDoctorDetails(pdf);
      pdf.save(`${doctor.name}_Report.pdf`);
    }

    // Helper function to add doctor details
    const addDoctorDetails = (pdf) => {
      const marginX = 10;
      const marginY = 80;
      const lineHeight = 10;
      const maxLineWidth = 180; // Max width for text, leaving some margin on the right
      
      pdf.setFontSize(12);
      
      
      pdf.text(`Email: ${doctor.email}`, marginX, marginY);
      pdf.text(`Specialty: ${doctor.specialty}`, marginX, marginY + lineHeight);
      pdf.text(`Phone: ${doctor.phone}`, marginX, marginY + 2 * lineHeight);
      pdf.text(`Location: ${doctor.location?.address || doctor.location}`, marginX, marginY + 3 * lineHeight);
      pdf.text(`Experience: ${doctor.experience}`, marginX, marginY + 4 * lineHeight);
      
      
      const suspendedStatus = doctor.suspended ? "Suspended" : "Active";
      pdf.text(`Status: ${suspendedStatus}`, marginX, marginY + 5 * lineHeight);

      
      const bioText = doctor.bio;
      const bioLines = pdf.splitTextToSize(bioText, maxLineWidth);
      pdf.text(bioLines, marginX, marginY + 6 * lineHeight);

      
      pdf.setFontSize(10);
      pdf.text('Generated by Molale Health App', marginX, pdf.internal.pageSize.height - 10);
    };
  };

  return (
    <div className="doctor-report-modal-overlay">
      <div className="doctor-report-modal-content">
        <h3 className="doctor-report-modal-heading">{doctor.name}'s Report</h3>
        <p><strong>Email:</strong> {doctor.email}</p>
        <p><strong>Specialty:</strong> {doctor.specialty}</p>
        <p><strong>Phone:</strong> {doctor.phone}</p>
        <p><strong>Location:</strong> {doctor.location?.address || doctor.location}</p>
        <p><strong>Experience:</strong> {doctor.experience}</p>
        <p><strong>Status:</strong> {doctor.suspended ? "Suspended" : "Active"}</p>
        <p><strong>Bio:</strong> {doctor.bio}</p>

        <div className="doctor-report-modal-buttons">
          <button onClick={onClose} className="doctor-report-modal-close-btn">Close</button>
          <button onClick={downloadPDF} className="doctor-report-modal-download-btn">Download PDF</button>
        </div>
      </div>
    </div>
  );
};

export default DoctorReportModal;
